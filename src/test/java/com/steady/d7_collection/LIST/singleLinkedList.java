package com.steady.d7_collection.LIST;

import java.util.Stack;

public class singleLinkedList {
    public static void main(String[] args) {
        test1();
    }
    public static void test1() {

        linkedSingleList l1=new linkedSingleList();   //l1 ??linkedList

        l1.addByOrder(new Node1(2, "????"));
        l1.addByOrder(new Node1(3, "?????"));
        l1.addByOrder(new Node1(4,"???"));
        l1.addByOrder(new Node1(1, "?ν?"));

        //?????????(no??next ?????)????????????????
        Node1 hx=new Node1(1,"songJiang");
        l1.change(hx);
        l1.delete(3);

        l1.showList();

        int a =getLength(l1.getHead());           //???????????????? ???? ??????
        System.out.println("??Ч??????:"+a);

        Node1 lastNode = findLastNode(l1.getHead(), 1);
        System.out.println("?????????"+lastNode);

        reverseList(l1.getHead());            //???????
        l1.showList();

        reversePrint(l1.getHead());      //?????????η????????????
    }

    /**
     * ???????????????
     * @param head ????????
     *             ?????????д??
     */

    public static void reversePrint(Node1 head){
        if (head.next==null){
            return;
        }
        Stack<Node1> sh =new Stack<>();
        Node1 temp=head.next;
        while (temp !=null){
            sh.push(temp);
            temp=temp.next;
        }
        while (sh.size() >0){
            System.out.println(sh.pop());
        }

    }
   

    public static void reverseList(Node1 head){
        if (head.next==null || head.next.next==null){
            return;
        }
        Node1 temp = head.next;                //temp???????????????????
        Node1 next =null;        //next???temp?????????????
        Node1 reverseNode =new Node1(0,"");             //??????????reverseNode ???????
        while (temp !=null){                                //????????????????rev??rev?н?????κ???
            next=temp.next;
            temp.next=reverseNode.next;           //??temp?????????У?????????rev
            reverseNode.next=temp;
            temp=next;
        }
        head.next=reverseNode.next;
    }

    /**
     *                         ?????????index????
     * @param head ????????
     * @return   ??????
     */
    public static Node1 findLastNode(Node1 head, int index){
        if (head.next==null){
            return null;
        }
        int size=getLength(head);
        if (index<=0 || index>size){
            return null;
        }
        Node1 temp=head.next;        //???????temp???????????????
        for (int i = 0; i < size - index; i++) {
            temp=temp.next;                 //temp???κ??? size-indexλ
        }
        return temp;
    }
    public static int getLength(Node1 head){                     //?????Ч????????????????
        if (head.next==null){                 //??????????? ->0  ??????
            return 0;
        }
        int length=0;
        Node1 temp=head.next;                 //temp??????????????????
        while (temp !=null){
            length++;
            temp=temp.next;
        }
        return length;
    }
}


/**
 *                 ??????????б????????Щ????
 */
class linkedSingleList{                      //?????????????
    private final Node1 head=new Node1(0,"");          //?????????  - ->head

    public Node1 getHead() {                   //head??л??????????getHead???????  getHead????-->head
        return head;
    }

    public void addList(Node1 h){
        //??????滻???????????????
        Node1 temp=head;

        while (temp.next != null) {
            temp = temp.next;
        }                                          //?????while???temp???????????
        temp.next=h;                    //??h????temp???????
    }

    /**
     * ????no ??????
     * no??? ?????????
     */
    public void addByOrder(Node1 h){
        Node1 temp=head;    //
        boolean flag=false;                //????????????????
        while (temp.next !=null){
            if (temp.next.no>h.no){                      //???while??????
                break;
            } else if (temp.next.no == h.no) {
                flag=true;
                break;
            } temp=temp.next;                      //temp????
        }
        if (flag){
            System.out.println("????????????????");
        }else {
            h.next=temp.next;                                //?????
            temp.next=h;
        }
    }

    /**
     * ????????????????????no??????滻
     * @param n ???????
     */

    public void change(Node1 n){                 //???????no???
        Node1 temp=head.next;
        boolean flag=false;
        while (true){
            if (temp==null){                  //temp???????temp=temp.next; ?????temp??? ???
                break;           //????δ??? ???no
            }
            if (temp.no==n.no){
                flag=true;
                break;
            }
            temp=temp.next;
        }
        if (flag){
            temp.name=n.name;
        }else System.out.println("????????");
    }

    public void delete(int no){
        Node1 temp=head;
        boolean flag=false;
        while (true){
        if (temp.next==null){                //??????????????no???
            break;
        }
        if (temp.next.no==no){              //???temp??????????????????,temp???????temp??????????????temp????????
            flag=true;
            break;
        }
        temp=temp.next;
        }
        if (flag){
            temp.next=temp.next.next;
        }else System.out.println("???????");
    }

    public void showList(){
        if (head.next==null){
            System.out.println("???????");
            return;
        }
        Node1 temp=head.next;       // ???????temp????????????
        while (temp !=null){
            System.out.print(temp);        //????дtoString
            temp=temp.next;            //temp????
        }
    }
}


class Node1 {                    //???????????
    public int no;       //????????????
    public String name;

    public Node1 next;
    public Node1(int no, String name){        //???????
        this.no=no;
        this.name=name;
    }
    @Override
    public String toString() {
        return "heroNode{" + "no=" + no + ", name='" + name + '\'' +  '}';
    }
}
